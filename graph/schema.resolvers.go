package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"

	"github.com/GrudTrigger/trainin_tracker/graph/model"
	"github.com/GrudTrigger/trainin_tracker/pkg/jwt"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	newUser, err := r.UserService.Create(&input)
	if err != nil {
		return nil, err
	}

	t, err := jwt.NewJwt(r.Configs.Secret).Create(jwt.JWTData{Email: newUser.Email})
	//Узнать как правильно возвращать такие ошибки в graphql
	if err != nil {
		return nil, err
	}

	payload := model.AuthPayload{
		Token: t,
		User: newUser,
	}

	return &payload, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	loginUser, err := r.UserService.Login(&input)
	if err != nil {
		return nil, err
	}
	t, err := jwt.NewJwt(r.Configs.Secret).Create(jwt.JWTData{Email: loginUser.Email})
	//Узнать как правильно возвращать такие ошибки в graphql
	if err != nil {
		return nil, err
	}

	payload := model.AuthPayload{
		Token: t,
		User: loginUser,
	}
	return &payload, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, email string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *mutationResolver) CreateUser(ctx context.Context, email string, login string, password string, role string) (*model.User, error) {
	data := user.CreateRequest{
		Email:    email,
		Login:    login,
		Password: password,
		Role:     role,
	}
	newUser, err := r.UserService.Create(&data)
	if err != nil {
		return nil, err
	}
	return newUser, nil
}
*/
