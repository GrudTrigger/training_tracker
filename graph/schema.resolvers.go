package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"errors"
	"fmt"

	"github.com/GrudTrigger/trainin_tracker/graph/model"
	"github.com/GrudTrigger/trainin_tracker/pkg/jwt"
	"github.com/GrudTrigger/trainin_tracker/pkg/middleware"
	"github.com/GrudTrigger/trainin_tracker/pkg/validInput"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, input model.RegisterInput) (*model.AuthPayload, error) {
	dto := validInput.Register{
		Login:    input.Login,
		Email:    input.Email,
		Password: input.Password,
		Role:     input.Role,
	}
	err := r.Validator.Struct(dto)
	if err != nil {
		return nil, err
	}

	newUser, err := r.UserService.Create(&input)
	if err != nil {
		return nil, err
	}

	t, err := jwt.NewJwt(r.Configs.Secret).Create(jwt.JWTData{Email: newUser.Email, Id: newUser.ID})
	if err != nil {
		return nil, err
	}

	payload := model.AuthPayload{
		Token: t,
		User:  newUser,
	}

	return &payload, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.AuthPayload, error) {
	dto := validInput.Login{
		Email:    input.Email,
		Password: input.Password,
	}

	err := r.Validator.Struct(dto)
	if err != nil {
		return nil, err
	}

	loginUser, err := r.UserService.Login(&input)
	if err != nil {
		return nil, err
	}
	t, err := jwt.NewJwt(r.Configs.Secret).Create(jwt.JWTData{Email: loginUser.Email, Id: loginUser.ID})
	if err != nil {
		return nil, err
	}

	payload := model.AuthPayload{
		Token: t,
		User:  loginUser,
	}
	return &payload, nil
}

// AddTraining is the resolver for the addTraining field.
func (r *mutationResolver) AddTraining(ctx context.Context, input model.AddTraining) (*model.Training, error) {
	u := middleware.GetUserForContext(ctx)
	if u == nil {
		return nil, errors.New("access denied")
	}
	t, err := r.TrainingService.Create(input, u.Id)
	if err != nil {
		return nil, err
	}
	return t, nil
}

// CreateExercise is the resolver for the createExercise field.
func (r *mutationResolver) CreateExercise(ctx context.Context, input model.CreateExercise) (*model.Exercise, error) {
	u := middleware.GetUserForContext(ctx)
	if u == nil {
		return nil, errors.New("access denied")
	}
	newEx, err := r.ExerciseService.Create(&input)
	if err != nil {
		return nil, err
	}
	return newEx, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, email string) (*model.User, error) {
	u, err := r.UserService.GetByEmail(email)
	if err != nil {
		return nil, err
	}
	return u, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	u := middleware.GetUserForContext(ctx)
	if u == nil {
		return nil, errors.New("access denied")
	}
	searchUser, err := r.UserService.GetByEmail(u.Email)
	if err != nil {
		return nil, err
	}
	return searchUser, nil
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Trainings is the resolver for the trainings field.
func (r *queryResolver) Trainings(ctx context.Context, input model.SearchTrainings) ([]*model.Training, error) {
	t, err := r.TrainingService.FindAll(input)
	if err != nil {
		return nil, err
	}
	return t, nil
}

// Training is the resolver for the training field.
func (r *queryResolver) Training(ctx context.Context, id string) (*model.Training, error) {
	t, err := r.TrainingService.FindById(id)
	if err != nil {
		return nil, err
	}
	return t, nil
}

// MyTraining is the resolver for the my_training field.
func (r *queryResolver) MyTraining(ctx context.Context) ([]*model.Training, error) {
	u := middleware.GetUserForContext(ctx)
	if u == nil {
		return nil, errors.New("access denied")
	}
	t, err := r.TrainingService.GetMy(u.Id)
	if err != nil {
		return nil, err
	}
	return t, err
}

// Exercise is the resolver for the exercise field.
func (r *queryResolver) Exercise(ctx context.Context, input model.SearchExercise) ([]*model.Exercise, error) {
	u := middleware.GetUserForContext(ctx)
	if u == nil {
		return nil, errors.New("access denied")
	}
	exs, err := r.ExerciseService.GetAll(&input)
	if err != nil {
		return nil, err
	}
	return exs, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
