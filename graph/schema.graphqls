scalar Time
scalar Date

type User {
	id: ID!
	email: String!
	login: String!
	password: String!
	role: String! #Надо подумать делать обязательным или нет
	telegram_id: String #При регистрации не нужно, только потом подвязывать
	created_at: Time
}

#Тренировки
type Training {
	id: ID!
	user_id: String!
	title: String!
	duration: String! #01:30
	date: Date! #2025-07-02
	notes: String!
	user_data: User
	exercise: Exercise
	created_at: Time
}

#Упражнения
type Exercise {
	id: ID!
	training_id: ID!
	title: String! #жим лежа,подтягивания
	muscle_group: Int! #0 - грудь, 1 - спина и тд
	approach_count: Int! #количество подходов
	weight: Int! #вес в кг
	created_at: Time
}

type AuthPayload {
	token: String!
	user: User!
}

#Inputs
input LoginInput {
	email: String!
	password: String!
}

input RegisterInput {
	email: String!
	login: String!
	password: String!
	role: String!
}
#Сделать notes необязательным
input AddTraining {
	name: String!
	duration: String!
	date: Date! #2025-07-02T08:30:00Z
	notes: String!
	type: Int!
}

input SearchTrainings {
	name: String
	type: Int
	limit: Int!
	offset: Int!
}

#EXERCISE
input CreateExercise {
	title: String!
	muscle_group: Int!
	approach_count: Int!
	weight: Int!
	training_id: ID!
}

input SearchExercise {
	title: String
	muscle_group: Int
	approach_count: Int
	weight: Int
	limit: Int!
	offset: Int!
}


type Query {
	user(email: String!): User
	me: User!
	userById(id: ID!): User
	users: [User!]!
	trainings(input: SearchTrainings!): [Training!]!
	training(id: ID!): Training
	my_training: [Training!]!
	exercise(input: SearchExercise!): [Exercise!]!
}

type Mutation {
	register(input: RegisterInput!): AuthPayload!
	login(input: LoginInput!): AuthPayload!
	addTraining(input: AddTraining!): Training!
	createExercise(input: CreateExercise!): Exercise!
}
