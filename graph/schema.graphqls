scalar Time
scalar Date

type User {
	id: ID!
	email: String!
	login: String!
	password: String!
	role: String! #Надо подумать делать обязательным или нет
	telegram_id: String #При регистрации не нужно, только потом подвязывать
	created_at: Time
}

type Training {
	id: ID!
	user_id: String!
	name: String!
	duration: String!
	date: Date! #2025-07-02
	notes: String!
	type: Int!
	created_at: Time
}

type AuthPayload {
	token: String!
	user: User!
}

#Inputs
input LoginInput {
	email: String!
	password: String!
}

input RegisterInput {
	email: String!
	login: String!
	password: String!
	role: String!
}
#Сделать notes необязательным
input AddTraining {
	name: String!
	duration: String!
	date: Date! #2025-07-02T08:30:00Z
	notes: String!
	type: Int!
}

input SearchTrainings {
	name: String
	type: Int
	limit: Int!
	offset: Int!
}

type Query {
	user(email: String!): User
	me: User!
	userById(id: ID!): User
	users: [User!]!
	trainings(input: SearchTrainings!): [Training!]!
	training(id: ID!): Training
}

type Mutation {
	register(input: RegisterInput!): AuthPayload!
	login(input: LoginInput!): AuthPayload!
	addTraining(input: AddTraining!): Training!
}
